@model Business.EmployeeProject
@{
    ViewBag.Title = "PayMe - Assign Employee to Project";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.37/js/bootstrap-datetimepicker.min.js"></script>
<div class="row">
    <ol class="breadcrumb">
        <li>
            <a href="#">
                <em class="fa fa-home"></em>
            </a>
        </li>
        <li class="active">Assign Employee to Project</li>
    </ol>
</div><!--/.row-->

<div class="panel panel-default">
    <div class="panel-heading">
        Assign Employee to Project

    </div>
    <div class="panel-body">
        @if (TempData["Message"] != null)
            {
            <p class="alert alert-success" id="successMessage">@TempData["Message"]</p>
        }

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @using (Html.BeginForm())
            {
            @Html.AntiForgeryToken()

            <div class="row">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.ClientID, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.DropDownList("ClientID", ViewBag.Client as SelectList, "--Please select--", new { @class = "form-control input-lg" })
                    @Html.ValidationMessageFor(model => model.ClientID, "", new { @class = "text-danger" })
                </div>

                <div class="col-lg-4">
                    @Html.LabelFor(model => model.ProjectId, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.DropDownList("ProjectId", ViewBag.Project as SelectList, "--Please select--", new { @class = "form-control input-lg" })
                    @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="row">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.TaskID, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.DropDownList("TaskID", ViewBag.Task as SelectList, "--Please select--", new { @class = "form-control input-lg" })
                    @Html.ValidationMessageFor(model => model.TaskID, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.EmpID, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.DropDownList("EmpID", ViewBag.Employee as SelectList, "--Please select--", new { @class = "form-control input-lg" })
                    @Html.ValidationMessageFor(model => model.EmpID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="clearfix"></div>
                <div class="col-lg-4">

                    @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                    @Html.TextBoxFor(model => model.StartDate, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                    @Html.TextBoxFor(model => model.EndDate, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="row">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.RegularRate, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.EditorFor(model => model.RegularRate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RegularRate, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.OTRate, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.EditorFor(model => model.OTRate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OTRate, "", new { @class = "text-danger" })
                </div>
            </div>

            <br />
            <div class="row">
                <div class="col-lg-4">
                    <input type="submit" value="Create" class="btn btn-md btn-primary" />
                    @Html.ActionLink("Cancel", "Index", "EmployeeProject", null, new { @class = "btn btn-md btn-primary" })

                </div>
            </div>
        }
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script type="text/javascript">

    $(document).ready(function () {

        $('#StartDate').datepicker({
            todayBtn: true,
            clearBtn: true,
            calendarWeeks: true,
            todayHighlight: true,
            format: "dd/MM/yyyy"
        });

        $('#EndDate').datepicker({
            todayBtn: true,
            clearBtn: true,
            calendarWeeks: true,
            todayHighlight: true,
            format: "dd/MM/yyyy"
        });


        //$("#StartDate").datetimepicker({

        //});
        //$("#EndDate").datepicker
        //  ({
        //      dateFormat: "yy-mm-dd",
        //      changeMonth: true,
        //      changeYear: true,
        //      yearRange: "-100:+100"
        //  });

    });

    $("#ClientID").change(function () {
        var clientNo = $("#ClientID").val();
        if (clientNo == null || clientNo == "") {
            alert("Please Select Client");
            return;
        }
        $("input[id='ClientName']").val(clientNo);
        if (clientNo != null || clientNo != "") {
            $.ajax({
                url: "/Tasks/BindProject",
                type: "POST",
                data: JSON.stringify({ 'clientNo': clientNo }),
                dataType: "json",
                traditional: true,
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    debugger;
                    var listItems = "";
                    var list = "";
                    var a = result.bindingAddresses.project;
                    listItems = "<option value='" + -1 + "'>" + "--Please select--" + "</option>"
                    //if (a.length > 0) {
                    //    listItems += "<option value='" + -2 + "'>" + "All Project" + "</option>"
                    //}
                    for (i in a) {
                        listItems += "<option value='" + a[i].Value + "'>" + a[i].Text + "</option>";
                    }
                    $("#ProjectId").html(listItems);
                },
                error: function () {
                    alert("An error has occured!!!");
                }
            });
        }
    });


    $("#ProjectId").change(function () {
        var ProjectId = $("#ProjectId").val();
        if (ProjectId == null || ProjectId == "") {
            alert("Please Select Project");
            return;
        }
        $("input[id='ProjectName']").val(ProjectId);
        if (ProjectId != null || ProjectId != "") {
            $.ajax({
                url: "/Tasks/BindTask",
                type: "POST",
                data: JSON.stringify({ 'ProjectId': ProjectId }),
                dataType: "json",
                traditional: true,
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    debugger;
                    var listItems = "";
                    var list = "";
                    var a = result.bindingAddresses.task;
                    listItems = "<option value='" + -1 + "'>" + "--Please select--" + "</option>"
                    //if (a.length > 0) {
                    //    listItems += "<option value='" + -2 + "'>" + "All Project" + "</option>"
                    //}
                    for (i in a) {
                        listItems += "<option value='" + a[i].Value + "'>" + a[i].Text + "</option>";
                    }
                    $("#TaskID").html(listItems);
                },
                error: function () {
                    alert("An error has occured!!!");
                }
            });
        }
    });


</script>
