@model  Business.Registration
@{
    ViewBag.Title = "PayMe - Register";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <ol class="breadcrumb">
        <li>
            <a href="#">
                <em class="fa fa-home"></em>
            </a>
        </li>
        <li class="active">Register</li>
    </ol>
</div><!--/.row-->





<div class="panel panel-default">
    <div class="panel-heading">Create User</div>
    <div class="panel-body">

        @if (TempData["MessageRegistration"] != null)
            {
            <p class="alert alert-success" id="successMessage">@TempData["MessageRegistration"]</p>
        }

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @using (Html.BeginForm())
            {
            @Html.AntiForgeryToken()

            <div class="row">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", @maxlength = 40, @onkeypress = "return onlyspecchar(event);" })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control", @maxlength = 40, @onkeypress = "return onlyspecchar(event);" })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.TextBoxFor(model => model.MobileNo, new { @class = "form-control", @maxlength = 10, @onkeydown = "return OnlyNumeric(this);" })
                    @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                </div>
                
            </div>

                <div class="row">
                    <div class="clearfix"></div>
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.EmailID, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.TextBoxFor(model => model.EmailID, new { @class = "form-control", @maxlength = 50 })
                        @Html.ValidationMessageFor(model => model.EmailID, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-4" >

                        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.DropDownList("Gender", new List<SelectListItem>
{
   new SelectListItem{ Text="Male", Value = "1" },
   new SelectListItem{ Text="Female", Value = "2" }
},new { @class = "form-control input-lg" })
                        
                        <br />
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.Birthdate, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.Birthdate, new { @class = "form-control", @onkeypress = "alert('Choose Birthdate');" })
                        @Html.ValidationMessageFor(model => model.Birthdate, "", new { @class = "text-danger" })
                    </div>
                   
                </div>
                <div class="row">
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.DateofJoining, htmlAttributes: new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.DateofJoining, new { @class = "form-control", @onkeypress = "alert('Choose DateofJoining');" })
                        @Html.ValidationMessageFor(model => model.DateofJoining, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.TextBoxFor(model => model.Username, new { @class = "form-control", @maxlength = 20, @onkeypress = "return onlyspecchar(event);", @onblur = "CheckUsernameExists();" })
                        @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.PasswordFor(model => model.Password, new { @class = "form-control", @maxlength = 30, })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                    
                </div>
                <div class="row">
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.EmployeeCode, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.TextBoxFor(model => model.EmployeeCode, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.EmployeeCode, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.TextBoxFor(model => model.Designation, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.fkDepartmentID, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.DropDownList("Department", new List<SelectListItem>
{
   new SelectListItem{ Text="IT", Value = "1" },
   new SelectListItem{ Text="NON-IT", Value = "2" }
}, new { @class = "form-control input-lg" })
                        @Html.ValidationMessageFor(model => model.fkDepartmentID, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.fkManagerId, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.DropDownList("Manager", new List<SelectListItem>
{
   new SelectListItem{ Text="Dinesh", Value = "1" },
   new SelectListItem{ Text="Ashok", Value = "2" }
}, new { @class = "form-control input-lg" })
                        @Html.ValidationMessageFor(model => model.fkManagerId, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.fkEmploymentLocationID, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.DropDownList("Employment Location", new List<SelectListItem>
{
   new SelectListItem{ Text="USA", Value = "1" },
   new SelectListItem{ Text="India", Value = "2" }
}, new { @class = "form-control input-lg" })
                        @Html.ValidationMessageFor(model => model.fkEmploymentLocationID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-4">
                        @Html.LabelFor(model => model.RoleID, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.DropDownList("RoleID", new List<SelectListItem>
{
   new SelectListItem{ Text="Admin", Value = "1" },
   new SelectListItem{ Text="Users", Value = "2" },
   new SelectListItem{ Text="SuperAdmin", Value = "3" }
}, new { @class = "form-control input-lg" })
                        @Html.ValidationMessageFor(model => model.RoleID, "", new { @class = "text-danger" })
                    </div>
                </div>
                    <br />
                    <div class="row">
                        <div class="col-lg-4">

                            <input type="submit" value="Create User" class="btn btn-primary btn-lg" />
                            @Html.ActionLink("Cancel", "Registration", "Registration", null, new { @class = "btn btn-primary btn-lg" })



                        </div>
                    </div>
                    }

                </div>
</div>




<script type="text/javascript">

    $(document).ready(function () {
        $("#Birthdate").datepicker
            ({
                dateFormat: "yy-mm-dd",
                changeMonth: true,
                changeYear: true,
                yearRange: "-100:+100",
                onSelect: function (date) {
                    var dob = new Date(date);
                    var today = new Date();

                    if (dob.getFullYear() + 18 < today.getFullYear()) {

                    }
                    else {
                        $("#Birthdate").val('');
                        alert("You are not eligible for Registration");
                    }
                }
            });

        $("#DateofJoining").datepicker
           ({
               dateFormat: "yy-mm-dd",
               changeMonth: true,
               changeYear: true,
               yearRange: "-100:+100"
           });

    });

    function OnlyNumeric(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode
        if ((charCode < 48 || charCode > 57)) {
            if (charCode == 8 || charCode == 46 || charCode == 0) {
                return true;
            }
            else {
                return false;
            }
        }
    }

    function CheckUsernameExists() {
        var url = '@Url.Content("~/")' + "Registration/CheckUserNameExists";
        var source = "#Username";
        $.post(url, { Username: $(source).val() }, function (data) {
            if (data) {
                $(source).val('');
                alert("Username Already Used try unique one!");
            }
            else {

            }
        });
    }

    function onlyspecchar(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode
        var txt = String.fromCharCode(charCode)
        if ((txt.match(/^[a-zA-Z\b. ]+$/)) || (txt.match(/^[0-9]+$/)) || (charCode == 64) || (charCode == 45) || (charCode == 46) || (charCode == 95) || (charCode == 41)) {
            return true;
        }
        return false;
    }
</script>