@model Business.TimeTracker
@{
    ViewBag.Title = "PayMe - Time Tracker";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <ol class="breadcrumb">
        <li>
            <a href="#">
                <em class="fa fa-home"></em>
            </a>
        </li>
        <li class="active">Time Tracker</li>
    </ol>
</div><!--/.row-->

<div class="panel panel-default">
    <div id="title" class="panel-heading">Time Tracker</div>
    <div class="panel-body">
        @if (TempData["Message"] != null)
            {
            <p class="alert alert-success" id="successMessage">@TempData["Message"]</p>
        }
      
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @using (Html.BeginForm("Create", "TimeTracker", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()

                <div class="row">
                    <div class="col-lg-2">
                        @Html.LabelFor(model => model.EmployeeID, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.DropDownList("EmployeeID", ViewBag.Employee as SelectList, "--Please select--", new { @class = "form-control input-lg" })
                        @Html.ValidationMessageFor(model => model.EmployeeID, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-2">
                        @Html.LabelFor(model => model.ClientID, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.DropDownList("ClientID", ViewBag.Client as SelectList, "--Please select--", new { @class = "form-control input-lg" })
                        @Html.ValidationMessageFor(model => model.ClientID, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-lg-2">
                        @Html.LabelFor(model => model.ProjectID, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.DropDownList("ProjectID", ViewBag.Project as SelectList, "--Please select--", new { @class = "form-control input-lg" })
                        @Html.ValidationMessageFor(model => model.ProjectID, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-2">
                        @Html.LabelFor(model => model.TaskID, htmlAttributes: new { @class = "control-label manadatory" })
                        @Html.DropDownList("TaskID", ViewBag.Task as SelectList, "--Please select--", new { @class = "form-control input-lg" })
                        @Html.ValidationMessageFor(model => model.TaskID, "", new { @class = "text-danger" })
                    </div>
                    
                    <div class="col-lg-2" style="margin-top:30px;">
                       
                        <input type="submit"  value="Start" class="btn btn-md btn-primary" />
                       
                    </div>

                    @*<p><button class="btn btn-default" onClick="$('.timer').countimer('start');">Start</button> <button class="btn btn-warning" onClick="$('.timer').countimer('stop');">Stop</button>  <button class="btn btn-success" onClick="$('.timer').countimer('resume');">Resume</button></p>*@

                </div>




            }

         
          
    

        <div class="row">
            <div class="col-lg-12">
                <div class="panel panel-default">
                 
                    <div class="panel-body">
                        <div id="toolbar">
                            <button id="export" class="btn btn-default">Export Excel</button>
                        </div>
                        <table id="table" data-toggle="table" data-show-refresh="true" data-show-toggle="true" data-show-columns="true" data-search="true" data-select-item-name="toolbar1" data-pagination="true" data-sort-name="name" data-sort-order="desc"
                               data-show-export="true" data-toolbar="#toolbar">
                            <thead>
                                <tr>
                                    <th data-field="EmployeeName" data-sortable="true">Employee</th>
                                    <th data-field="ClientName" data-sortable="true">Client </th>
                                    <th data-field="ProjectName" data-sortable="true">Project </th>
                                    <th data-field="TaskName" data-sortable="true">Task </th>
                                    <th data-field="CheckInDateTime" data-sortable="true" data-formatter="dateFormat">Check In Date Time</th>
                                    <th data-field="CheckOutDateTime" data-sortable="true" data-formatter="dateFormat">Check Out Date Time</th>
                                    <th data-field="TimeWorked" data-sortable="true">Time</th>
                                    <th data-field="ID" data-sortable="true" data-formatter="Action"></th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        </div>
  
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
<script src="~/js/ez.countimer.min.js"></script>

<script>

    $(document).ready(function () {
        $('.timer').countimer({
            autoStart: false
        });
        $('#table').bootstrapTable('refresh', {
            "url": "/TimeTracker/GetTimeTracker/"
        });
        var table = $('#table');
        $('#export').click(function () {
            table.tableExport({
                type: 'excel',
                escape: false
            });
        });
    });
   
    function Action(value, row) {
        debugger;
        if (row.CheckOutDateTime == null) {
            return '<input type="submit" onClick="UpdateTimeTracker(' + value + ')" value="Stop" class="btn btn-md btn-primary" />'
        }

        
    }
    function UpdateTimeTracker(id) {
        debugger;
        $.ajax({
            url: "/TimeTracker/UpdateTimeTracker",
            type: "POST",
            data: JSON.stringify({ 'id': id }),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (result) {
                debugger;
                $('#table').bootstrapTable('refresh', {
                    "url": "/TimeTracker/GetTimeTracker/"
                });
            },
            error: function () {
               alert("Error Occured!")
            }
        });
    }
    $("#ClientID").change(function () {
        var clientNo = $("#ClientID").val();
        if (clientNo == null || clientNo == "") {
            alert("Please Select Client");
            return;
        }
        $("input[id='ClientName']").val(clientNo);
        if (clientNo != null || clientNo != "") {
            $.ajax({
                url: "/Tasks/BindProject",
                type: "POST",
                data: JSON.stringify({ 'clientNo': clientNo }),
                dataType: "json",
                traditional: true,
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    debugger;
                    var listItems = "";
                    var list = "";
                    var a = result.bindingAddresses.project;
                    listItems = "<option value='" + -1 + "'>" + "--Please select--" + "</option>"
                    for (i in a) {
                        listItems += "<option value='" + a[i].Value + "'>" + a[i].Text + "</option>";
                    }
                    $("#ProjectID").html(listItems);
                },
                error: function () {
                    alert("An error has occured!!!");
                }
            });
        }
    });

    $("#ProjectID").change(function () {
        var projectId = $("#ProjectID").val();
        if (projectId == null || projectId == "") {
            alert("Please select project");
            return;
        }
        $("input[id='ProjectName']").val(projectId);
        if (projectId != null || projectId != "") {
            $.ajax({
                url: "/Tasks/GetTaskListByProject",
                type: "POST",
                data: JSON.stringify({ 'projectId': projectId }),
                dataType: "json",
                traditional: true,
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    debugger;
                    var listItems = "";
                    var list = "";
                    var a = result.bindingAddresses.task;
                    listItems = "<option value='" + -1 + "'>" + "--Please select--" + "</option>"
                    for (i in a) {
                        listItems += "<option value='" + a[i].Value + "'>" + a[i].Text + "</option>";
                    }
                    $("#TaskID").html(listItems);
                },
                error: function () {
                    alert("An error has occured!!!");
                }
            });
        }

    });
    function dateFormat(value, row, index) {
        if(value!=null)
        return moment(value).format('DD/MM/YYYY HH:mm:ss');
    }
</script>