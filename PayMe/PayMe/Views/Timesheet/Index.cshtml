
@{
    ViewBag.Title = "PayMe - Create Expense Summary";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Timesheet</h2>

<!DOCTYPE html>









<html>

<head>
  
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.44/js/bootstrap-datetimepicker.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.44/css/bootstrap-datetimepicker.min.css"></script>
    <link type="text/css" rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jsgrid/1.5.3/jsgrid.min.css" />
    <link type="text/css" rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jsgrid/1.5.3/jsgrid-theme.min.css" />
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jsgrid/1.5.3/jsgrid.min.js"></script>

    
</head>
<body>
    <div id="jsGrid" style="overflow: visible;"></div>
</body>
</html>

<script>
    department_list = [
      { "id": 1, "department": "Department A" },
      { "id": 2, "department": "Department B" }
    ];

    team_list = [
        { "department": "Department A", "id": 1, "team": "Team A" },
        { "department": "Department B", "id": 2, "team": "Team B" },
        { "department": "Department B", "id": 3, "team": "Team C" }
    ];

    content = [
        
    ];
    $.ajax({
        type: "GET",
        url: "/Client/GetClientList/"
    }).done(function (Clients) {
       
        Clients.unshift({ ID: "0", ClientName: "" });

        $.ajax({
            type: "GET",
            url: "/Project/GetProjectList/"
        }).done(function (projectList) {
         
            projectList.unshift({ ID: "0", ProjectName: "" });

            $.ajax({
                type: "GET",
                url: "/Tasks/GetTaskList/"
            }).done(function (taskList) {
             
                taskList.unshift({ ID: "0", TaskName: "" });


                var MyDateField = function (config) {
                
                    jsGrid.Field.call(this, config);
                };

                MyDateField.prototype = new jsGrid.Field({
                    sorter: function (date1, date2) {
                        return new Date(date1) - new Date(date2);
                    },

                    itemTemplate: function (value) {
                    
                        if (value === null) {
                            return '';
                        } else {
                            return moment(value).format("DD/MM/YYYY");
                        }
                    },

                    insertTemplate: function (value) {
                        return this._insertPicker = $("<input>").datepicker({ defaultDate: new Date() });
                    },

                    editTemplate: function (value) {
                        
                        return this._editPicker = $("<input>").datepicker().datepicker("setDate", new moment(value).format("DD/MM/YYYY"));
                    },

                    insertValue: function () {
                        return this._insertPicker.datepicker("getDate").toISOString();
                    },

                    editValue: function () {
                        return this._editPicker.datepicker("getDate").toISOString();
                    }
                });

                jsGrid.fields.myDateField = MyDateField;
                var SolRiaDateTimeField = function (config) {
                    jsGrid.Field.call(this, config);
                };
                SolRiaDateTimeField.prototype = new jsGrid.Field({
                    sorter: function (date1, date2) {
                        return new Date(date1) - new Date(date2);
                    },

                    itemTemplate: function (value) {
                        if (value === null) {
                            return '';
                        } else {
                            return moment(value).format('DD/MM/YYYY HH:mm:ss');
                        }
                    },

                    insertTemplate: function (value) {
                        this._insertPicker = $('<input>').datetimepicker({
                            format: 'DD/MM/YYYY HH:mm:ss',
                            defaultDate: moment(),
                            widgetPositioning: {
                                horizontal: 'auto',
                                vertical: 'bottom'
                            }
                        });

                        this._insertPicker.data('DateTimePicker').date(moment());
                        return this._insertPicker;
                    },

                    editTemplate: function (value) {
                        this._editPicker = $('<input>').datetimepicker({
                            format: 'DD/MM/YYYY HH:mm:ss',
                            widgetPositioning: {
                                horizontal: 'auto',
                                vertical: 'bottom'
                            }
                        });

                        if (value !== null) {
                            this._editPicker.data('DateTimePicker').defaultDate(moment(value));
                            this._editPicker.data('DateTimePicker').date(moment(value));
                        }
                        return this._editPicker;
                    },

                    insertValue: function () {
                        var insertValue = this._insertPicker.data('DateTimePicker').date();
                        if (typeof insertValue !== 'undefined' && insertValue !== null) {
                            return insertValue.format('DD/MM/YYYY HH:mm:ss');
                        } else {
                            return null;
                        }
                    },

                    editValue: function () {
                        var editValue = this._editPicker.data('DateTimePicker').date();
                        if (typeof editValue !== 'undefined' && editValue !== null) {
                            return editValue.format('DD/MM/YYYY HH:mm:ss');
                        } else {
                            return null;
                        }
                    }
                });
                jsGrid.fields.solRiaDateTimeField = SolRiaDateTimeField;
               
               
    $("#jsGrid").jsGrid({
        width: "100%",
        inserting: true,
        editing: true,
        sorting: true,
        paging: true,
        data: content,
        autoload: true,
        deleteConfirm: "Are you sure?",
        controller: {
            loadData: function (filter) {
               
                return $.ajax({
                    type: "GET",
                    url: "/Timesheet/GetTimesheetEntries/",
                    data: filter
                });
            },
            insertItem: function (item) {
             
                return $.ajax({
                    type: "POST",
                    url: "/Timesheet/CreateTimesheet/",
                    data: item
                }).done(function (filter) {
                    $("#jsGrid").jsGrid("loadData");
                });
            },
        },
        fields: [
			
			   {
			       name: "fkClientId", title: "Client", type: "select", items: Clients, valueField: "ID", textField: "ClientName", title: "Client", insertcss: "client-insert",
			       insertTemplate: function () {

			           var projectField = this._grid.fields[1];
			           var $insertControl = jsGrid.fields.select.prototype.insertTemplate.call(this);

			           $insertControl.on("change", function () {

			               var selectedClient = $(this).val();
			               var clietProject = $.grep(projectList, function (team) {
			                   return team.ClientID == parseInt(selectedClient);
			               });

			               projectField.items = clietProject;

			               $(".project-insert").empty().append(projectField.insertTemplate());
			           });

			           return $insertControl;
			       }, width: 150, align: "center"
			   },
                            {
                                name: "fkProjectID", type: "select", items: projectList, valueField: "ID", textField: "ProjectName", title: "Project", insertcss: "project-insert",
                                insertTemplate: function () {

                                    var taskField = this._grid.fields[2];
                                    var $insertControl = jsGrid.fields.select.prototype.insertTemplate.call(this);

                                    $insertControl.on("change", function () {
                                    
                                        var selectedProject = $(this).val();
                                        var projectTask = $.grep(taskList, function (task) {
                                            return task.ProjectId == parseInt(selectedProject);
                                        });

                                        taskField.items = projectTask;

                                        $(".task-insert").empty().append(taskField.insertTemplate());
                                    });

                                    return $insertControl;
                                },
                            },
                            { name: "fkTaskID", type: "select", items: taskList, valueField: "ID", textField: "TaskName", title: "Task",insertcss: "task-insert" },
                            {
                                name: "CheckInDate",
                                type: "myDateField",
                                width: 'auto',
                                title: "Check In Date"
                            },
                             { name: "CheckInDateTime", type: "solRiaDateTimeField", width: 'auto', title: "Check In DateTime" },
                            { name: "CheckOutDatetime", type: "solRiaDateTimeField", width: 'auto', title: "Check Out DateTime" },
                            { name: "Description", type: "text", width: 200 },
                            

            { type: "control", editButton: false, modeSwitchButton: false }
        ]
    });

    var selectedItems = [];

    var selectItem = function (item) {
        selectedItems.push(item);
    };

    var unselectItem = function (item) {
        selectedItems = $.grep(selectedItems, function (i) {
            return i !== item;
        });
    };

    var deleteSelectedItems = function () {
        if (!selectedItems.length || !confirm("Are you sure?"))
            return;

        var $grid = $("#jsGrid");

        $.each(selectedItems, function (_, item) {
            $grid.jsGrid("deleteItem", item);
        });

        selectedItems = [];
    };
            });
        });
    });

</script>
