@model Business.ExpenseDetail
@{
    ViewBag.Title = "PayMe - Create Expense Summary";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="row">
    <ol class="breadcrumb">
        <li>
            <a href="#">
                <em class="fa fa-home"></em>
            </a>
        </li>
        <li class="active">Expense Summary</li>
    </ol>
</div><!--/.row-->

<div class="panel panel-default">
    <div class="panel-heading">Enter Expense</div>
    <div class="panel-heading" style="font-weight:bold;">@ViewBag.ExpenseSummaryName</div>
    <div class="panel-body">
        @if (TempData["Message"] != null)
            {
            <p class="alert alert-success" id="successMessage">@TempData["Message"]</p>
        }

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @using (Html.BeginForm("Detail", "Expense", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
            @Html.AntiForgeryToken()

            <div class="row">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.CategoryID, htmlAttributes: new { @class = "control-label manadatory" }) <span class="text-danger">*</span>
                    @Html.DropDownList("CategoryID", ViewBag.Category as SelectList, "--Please select--", new { @class = "form-control input-lg" })
                    @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
                </div>

                <div class="col-lg-4">
                    @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label manadatory" }) <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.HasBill, htmlAttributes: new { @class = "control-label manadatory" })
                    <br />
                    @Html.EditorFor(model => model.HasBill)
                    @Html.ValidationMessageFor(model => model.HasBill, "", new { @class = "text-danger" })
                </div>

                <div class="col-lg-4">
                    @Html.LabelFor(model => model.GrossTotal, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                    @Html.TextBoxFor(model => model.GrossTotal, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.GrossTotal, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.TaxAmount, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                    @Html.TextBoxFor(model => model.TaxAmount, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TaxAmount, "", new { @class = "text-danger" })
                </div>

                <div class="col-lg-4">
                    @Html.LabelFor(model => model.VatNumber, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                    @Html.TextBoxFor(model => model.VatNumber, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.VatNumber, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="row">
                <div class="clearfix"></div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                    @Html.TextBoxFor(model => model.Amount, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.BillDate, htmlAttributes: new { @class = "control-label" }) <span class="text-danger">*</span>
                    @Html.TextBoxFor(model => model.BillDate, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BillDate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.CurrencyBillNo, htmlAttributes: new { @class = "control-label manadatory" }) <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.CurrencyBillNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.CurrencyBillNo, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.HasAttachment, htmlAttributes: new { @class = "control-label manadatory" })
                    <br />
                    @Html.EditorFor(model => model.HasAttachment)
                    @Html.ValidationMessageFor(model => model.HasAttachment, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="row">
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label manadatory" })
                    @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-4">
                    @Html.LabelFor(model => model.PaidTo, htmlAttributes: new { @class = "control-label manadatory" }) <span class="text-danger">*</span>
                    @Html.EditorFor(model => model.PaidTo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PaidTo, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-lg-4">
                    @Html.TextBoxFor(model => model.expenseAttachment, new { Type = "File" })
                </div>
            </div>
            <br />
                <div class="row">
                    <div class="col-lg-4">
                        <input type="submit" value="Create" class="btn btn-md btn-primary" />
                        @Html.ActionLink("Cancel", "Index", "Expense", null, new { @class = "btn btn-md btn-primary" })
                    </div>
                </div>
        }
    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <div class="panel-heading">Expense Detail</div>
                <div class="panel-body">
                    <div id="toolbar">
                        <button id="export" class="btn btn-default">Export Excel</button>
                    </div>
                    <table id="table" data-toggle="table" data-show-refresh="true" data-show-toggle="true" data-show-columns="true" data-search="true" data-select-item-name="toolbar1" data-pagination="true" data-sort-name="name" data-sort-order="desc"
                           data-show-export="true" data-toolbar="#toolbar">
                        <thead>
                            <tr>
                                <th data-field="CategoryName" data-sortable="true">Category Name</th>
                                <th data-field="CurrencyBillNo" data-sortable="true">Currency Bill No</th>
                                <th data-field="Amount" data-sortable="true">Amount</th>
                                <th data-field="BillDate" data-sortable="true" data-formatter="dateFormat">BillDate</th>
                                <th data-field="Location" data-sortable="true">Location</th>
                                <th data-field="HasAttachment" data-sortable="true" data-formatter="YesNoFormater">Has Attachment</th>
                                <th data-field="Notes" data-sortable="true">Notes</th>
                                <th data-field="ID" data-sortable="true" data-formatter="Download">Download</th>
                                <th data-field="ID" data-sortable="true" data-formatter="ActionDelete">Delete</th>
                                @*<th data-field="ID" data-sortable="true" data-formatter="ActionEdit">Edit</th>*@
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "/Index")
</div>
<script src="https://momentjs.com/downloads/moment.min.js"></script>
<script type="text/javascript">

    function ActionEdit(value) {
        return '<a href="../EditDetail(' + value + ',' + @ViewBag.ExpenseSummaryID + ')"><em class="fa fa-pencil" style="font-size:18px;"></a>';
    }

    function ActionDelete(value) {
        return '<a onclick="return confirm_click();" href="../Delete/' + value + ' "><em class="fa fa-trash"  style="font-size:18px;color:red"></a>';
    }
    function confirm_click(value) {
        return confirm('Are you sure do you want to delete the Expense?');
    }
    $(document).ready(function () {

        $("#expenseAttachment").hide();
        var table = $('#table');
        $('#export').click(function () {
            table.tableExport({
                type: 'excel',
                escape: false
            });
        });
        $('#table').bootstrapTable('refresh', {
            "url": "/Expense/GetExpenseDetail/"+@ViewBag.ExpenseSummaryID
            });

        $("#BillDate").datepicker
           ({
               dateFormat: "yy-mm-dd",
               changeMonth: true,
               changeYear: true,
               yearRange: "-100:+100"
           });

        $("#HasAttachment").click(function () {
            if ($(this).is(':checked')) {
                $("#expenseAttachment").show();
            }
            else {
                $("#expenseAttachment").hide();
            }
        });


        $("#HasBill").click(function () {
            if ($(this).is(':checked')) {
                //$("#BillDate").rules("add", 'required');
                //$("#Amount").rules("add", 'required');
                //$("#VatNumber").rules("add", 'required');
                //$("#TaxAmount").rules("add", 'required');
                //$("#CurrencyBillNo").rules("add", 'required');

                $('#GrossTotal').prop('disabled', false);
                $('#TaxAmount').prop('disabled', false);
                $('#VatNumber').prop('disabled', false);
                $('#BillDate').prop('disabled', false);
                $('#CurrencyBillNo').prop('disabled', false);
            }
            else {
                $('#GrossTotal').prop('disabled', true);
                $('#TaxAmount').prop('disabled', true);
                $('#VatNumber').prop('disabled', true);
                $('#BillDate').prop('disabled', true);
                $('#CurrencyBillNo').prop('disabled', true);

                //$('#BillDate').rules('remove');
                //$("#Amount").rules('remove');
                //$("#VatNumber").rules('remove');
                //$("#TaxAmount").rules('remove');
                //$("#CurrencyBillNo").rules('remove');
                //$('.field-validation-valid span').text('')
                //$('.field-validation-valid span').html('')
            }
        });


    });

    function Download(value,row) {
        if (row.HasAttachment != null && row.HasAttachment != false ) {
            return '<a href="/Expense/DownloadFile/' + value + '"><em class="fa fa-download"></a>';
        }
    }
    function dateFormat(value, row, index) {
        return moment(value).format('MM/DD/YYYY');
    }
    function YesNoFormater(value) {
        return value == true ? 'Yes' : 'No';
    }

</script>
